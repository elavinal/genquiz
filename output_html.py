# GenQuiz, a Moodle XML quiz generator from questions in a YAML file.
# Copyright (C) 2021 Emmanuel Lavinal
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

from pygments import highlight
from pygments.lexers.c_cpp import CLexer
from pygments.formatters import HtmlFormatter

# Global question number, should change this...
question_number = 0

def make_html_header():
    h = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" ' + \
        '"http://www.w3.org/TR/html4/loose.dtd">\n'
    h += '<html><head><title>{}</title>\n'.format('Quiz - HTML Preview')
    h += '<meta http-equiv="content-type" content="text/html; charset=utf-8">\n'
    h += '<style type="text/css">\n'
    h += '/* Style generated by Pygments */\n'
    h += HtmlFormatter().get_style_defs('.highlight')
    h += '\n/* Style generated by genquiz */\n'
    h += 'span.ans { color: #999999}\n'
    h += 'table.ans { border: 1px solid black; }\n'
    h += 'td.ans { border: 1px solid black; }\n'
    h += '\n</style></head>\n'
    h += '<h1>Quiz - HTML Preview</h1>\n'
    return h

def make_html_footer():
    return '\n</body></html>'

def make_category(question):
    return '\n<h2 style="color:DarkRed;">Category "{}"</h2>\n'.format(question['qname'])

def make_question_title(name):
    global question_number
    question_number += 1
    return '\n<hr>\n<h3>Q{}) {}</h3>\n'.format(question_number, name)

def generate_code_html(question):
    # Use pygments to highlight the code
    code_html = highlight(question['code'], CLexer(), HtmlFormatter())
    return code_html

def question_text(question):
    str = '\n<p>' + question['text1'] + '</p>\n'
    if 'code' in question:
        str += generate_code_html(question)
    if 'text2' in question:
        str += '<p>' + question['text2'] + '</p>\n'
    else:
        str += '<p></p>\n'
    return str

def make_question_multichoice(question):
    # Name
    q = make_question_title(question['qname'])
    # Text
    q += question_text(question)
    # Answers
    q += '<form>\n'
    if question['type'] == 'single':
        in_type = 'radio'
    else:
        in_type = 'checkbox'
    for i, answer in enumerate(question['answers']):
        q += '  <input type="{}" id="id{}" name="quest">\n'.format(in_type, i)
        if 'text' in answer:
            q += '  <label for="id{}">{} <span class="ans">[{}]</span></label><br>\n'\
                    .format(i, answer['text'], answer['fraction'])
        elif 'code' in answer:
            code_html = highlight(answer['code'], CLexer(), HtmlFormatter())
            q += '  <label for="id{}">{} <span class="ans">[{}]</span></label><br>\n'\
                    .format(i, code_html, answer['fraction'])
    q += '</form>\n'
    return q

def make_question_numerical(question):
    # Name
    q = make_question_title(question['qname'])
    # Text
    q += question_text(question)
    # Answers
    q += '<form>\n'
    q += '<label for="fname">Answer: </label>'
    q += '<input type="text" id="fname" name="fname"> '
    q += '<span class="ans">['
    q += ' or '.join(
        map(lambda d: str(d['text']) + ' [' + str(d['fraction']) + ']',
            question['answers']))
    q += ']</span><br>'
    q += '</form>\n'
    return q

def make_question_shortanswer(question):
    # Name
    q = make_question_title(question['qname'])
    # Text
    q += question_text(question)
    # Answers
    q += '<form>\n'
    q += '<label for="fname">Answer: </label>'
    q += '<input type="text" id="fname" name="fname"> '
    q += '<span class="ans">['
    q += ' or '.join(
        map(lambda d: str(d['text']) + ' [' + str(d['fraction']) + ']',
            question['answers']))
    q += ']</span><br>'
    q += '</form>\n'
    return q

def make_question_matching(question):
    # Name
    q = make_question_title(question['qname'])
    # Text
    q += question_text(question)
    # Answers
    q += '\n<table class="ans">\n'
    for subquestion in question['subquestions']:
        q += '<tr>\n'
        q += '<td class="ans">{}</td>\n'.format(subquestion['text'])
        q += '<td class="ans">{}</td>\n'.format(subquestion['answer'])
        q += '</tr>\n'
    q += '</table>\n'
    return q
